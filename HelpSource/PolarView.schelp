TITLE:: PolarView
summary:: A polar plot for data of one or more channels.
categories:: GUI
related:: Classes/ValueView, Classes/Plotter

DESCRIPTION::
A radial plot view for viewing data degrees or radians, (e.g. microphone
patterns, cylindrical/spherical harmonics, etc.).
The plot is comprised of multiple layers, each with their own settable
attributes: grid lines, data plot, title, and legend.


CLASSMETHODS::

METHOD:: new
Create a new link::Classes/PolarView::.

ARGUMENT:: parent
An optional parent view in which to embed the link::Classes/PolarView::. If
code::nil::, a new window is created for the plot.

ARGUMENT:: bounds
A link::Classes/Rect:: specifying the view's origin within the strong::parent::
view, and its dimensions.

ARGUMENT:: data
An link::Classes/Array:: of data to plot. 2D arrays are considered multichannel
data and plotted separately, each with settable attribute. See the properties
of the link::#-plots:: drawing layer.

ARGUMENT:: thetaArray
An link::Classes/Array:: of values corresponding to angular positions of each
data point, or an array of to be interpreted as envelope breakpoints into which
the data is mapped (typically just a start and end position). 2D arrays are
treated the same as with strong::data::. For more details see link::#-data::.
If code::nil:: thetaArray matches strong::thetaBounds::, mapping the data into
the full sweep range of your plot.

ARGUMENT:: thetaBounds
An link::Classes/Array:: of 2 elements: the lower and upper bound of the sweep
of the plot. These bounds can be describe a plot range equal to or greater than
the  ranges of strong::thetaArray::. The values are relative to the
strong::thetaZeroPosition:: and strong::thetaDirection::.
Default is code::[0, 2pi]::.

ARGUMENT:: rhoBounds
An link::Classes/Array:: of 2 elements: the lower and upper radial bounds of the
plot. If code::nil::, the bounds will be the maximum and minumum value of your
strong::data::. If your data lies outside the range of your strong::rhoBounds::,
it will be clipped on the plot.
Note that if your strong::plotUnits:: are code::\db::, your data will be also
be clipped by link::#-clipDbLow:: in the case this is greater than your lower
bound.

ARGUMENT:: thetaDirection
The sweep direction of the plot, code::\cw:: or code::\ccw::, clockwise or
counter-clockwise, respectively. Default code::\cw::.

ARGUMENT:: thetaZeroPosition
A radian value or position keyword (code::\top::, code::\botom::, code::\left::,
code::\right::) specifying the anglular position of code::0::. When setting this
by a radian value, reference angle code::0:: at the top of the plot (12 o'clock),
advancing in the direction set by the strong::thetaDirection:: argument.

ARGUMENT:: plotRadius
A value normalized to the radius of the view, where code::1.0:: would extend the
plot radius to the edge of the view. Default code::0.9::.
Note::The values of the link::#-thetaGridLines:: displayed in the
link::#-grid:: are drawn just outside the plot's radius, so use a value less
than code::1.0:: to allow room for these labels if you plan to include labels
for the theta grid lines.::

ARGUMENT:: dataUnits
The unit of measurement of your strong::data::: code::\db:: or code::\scalar::.
Default code::\scalar::. This need not match the strong::plotUnits:: argument,
which determines the units the data are displayed in.

ARGUMENT:: plotUnits
The unit of measurement to emphasis::display:: in the plot: code::\db::
or code::\scalar::. Defaults to strong::dataUnits::. The data need not be
provided in the same units as the plotâ€”conversion to the plot's units happens
internally.


INSTANCEMETHODS::



SUBSECTION:: Plot orientation


METHOD:: thetaZeroPosition
Set/get the reference for the angular direction of zero. This angle will be
relative to the code::\top:: (12 o'clock) position, and
the link::#-thetaDirection:: you specify (clockwise or counterclockwise).
link::#-thetaMin:: is defined relative to this position.

ARGUMENT:: radiansOrDir
A radian angle, referencing code::0:: as up, and a positive offset
from code::0:: degrees in either a clockwise or counterclockwise direction as
specified by link::#-thetaDirection::. Also accepts
keywords: code::\top::, code::\botom::, code::\left::, code::\right::.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaDirection
Get/set the positive direction of the plot: clockwise or counterclockwise. This
affects the display of the data, as well as the direction of the offset of the
link::#-thetaMin:: from the link::#-thetaZeroPosition::.

ARGUMENT:: dir
A link::Classes/Symbol::, code::\cw:: or code::\ccw::.



SUBSECTION:: Grid Lines


METHOD:: rhoGridLines
Set the range and interval of rho (latitude) lines on the plot. Return the
calculated rho values with the getter method of the same name.

To set specific rho values, use link::#-rhoGridLinesAt::.

ARGUMENT:: spacing
The increment between rho lines, in link::#-plotUnits::.

ARGUMENT:: from
The first value at which to draw a rho line, in link::#-plotUnits::. Also
accepts keywords code::\min:: and code::\max::, which correspond to the bounds
of the link::#-plotSpec::. Defaults to code::\max::, which ensures a rho line
is drawn at the outmost edge of the plot.

ARGUMENT:: to
The last value to draw a level line, in link::#-plotUnits::. Also accepts
keywords code::\min:: and code::\max::, which correspond to the bounds
of the link::#-plotSpec::. Default code::\min::.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoGridLinesAt
Draw data rho (latitude) grid lines at specific values, as opposed to even
intervals as in link::#-rhoGridLines::.

ARGUMENT:: rhoArray
An link::Classes/Array:: of values at which to draw rho (latitude) lines on the
plot. Values should be in the same units as link::#-plotUnits::. Levels that are
out of the range of the link::#-rhoSpec:: are discarded.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaGridLines
Set the spacing between theta (longitude) grid lines, in radians. Return the
calculated theta values with the getter method of the same name.

To set specific theta values, use link::#-thetaGridLinesAt::.

ARGUMENT:: spacing
The increment between theta lines, in radians.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaGridLinesAt
Draw theta (longitude) grid lines at specific values, as opposed to even
intervals as in link::#-thetaGridLines::.

ARGUMENT:: thetaArray
An link::Classes/Array:: of values at which to draw longitude lines on the plot,
in radians. Values that are out of the range of code::thetaMin:: and
code::thetaMin + thetaRange:: are discarded.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.



SUBSECTION:: Bounds of data display


METHOD:: thetaMin
Set/get the angular position of the plot's minimum bound.

ARGUMENT:: radians
A radian angle, relative to link::#-thetaZeroPosition:: and link::#-thetaDirection::.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaRange
Set/get the sweep length of the plot, starting from link::#-thetaMin::.

ARGUMENT:: radians
Sweep length of the plot, in radians.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoMinMax
Set the min and max rho values displayed on the plot, in link::#-plotUnits::.
Data outside this range is clipped. This is the preferred way to set the min and
max at the same time.

ARGUMENT:: min
Minimum value to display, in link::#-plotUnits::. If code::nil::, the minimum
will be inferred from the data.

ARGUMENT:: max
Maximum value to display, in link::#-plotUnits::. If code::nil::, the maximum
will be inferred from the data.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoMin
Set the minimum rho values displayed on the plot.
Data outside this range is clipped. To set both the min and max at the same time,
it's more efficient to use link::#-rhoMinMax::.

ARGUMENT:: min
Minimum value to display, in link::#-plotUnits::.  If code::nil::, the minimum
will be inferred from the data.

ARGUMENT:: rescaleNow
A link::Classes/Boolean::, specifying whether to recalculate internal data
immediately. Many of these calculations would be redundant of followed by
setting link::#-rhoMax:: (hence the link::#-rhoMinMax:: method), which is
noticeable with large data sets. Default is code::true::.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoMax
Set the maximum rho values displayed on the plot.
Data outside this range is clipped. To set both the min and max at the same time,
it's more efficient to use link::#-rhoMinMax::.

ARGUMENT:: max
Maximum value to display, in link::#-plotUnits::. If code::nil::, the maximum
will be inferred from the data.

ARGUMENT:: rescaleNow
A link::Classes/Boolean::, specifying whether to recalculate internal data
immediately. Many of these calculations would be redundant of followed by
setting link::#-rhoMin:: (hence the link::#-rhoMinMax:: method), which is
noticeable with large data sets. Default is code::true::.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoSpec
Get/set the link::Classes/ControlSpec:: used to map the (rho) data to the plot.
This is similar to setting link::#-rhoMin:: and link::#-rhoMax::, but as the
the min and max values in those setters can be code::nil::, inferring the values
from the data and also returning code::nil:: when getting the value, the min
and max values of strong::rhoSpec:: reflect the emphasis::actual:: bounds into
which the data is mapped.  These are the values returned from
link::#-plotMin:: and link::#-plotMax::.

ARGUMENT:: spec
A link::Classes/ControlSpec:: with minval and maxval in link::#-plotUnits::.
Specifying a non-linear strong::warp:: in this link::Classes/ControlSpec::
allow you to display your data (and grid lines) on a warped scaling
(see also link::#-rhoWarp::).

ARGUMENT:: recalcNow
A link::Classes/Boolean::, specifying whether to recalculate the internal data
immediately (recommended). In some special cases, e.g. large datasets and
multiple parameter-setting operations, you may want to only rescale the data at
the end of all of the operations. Default is code::true::.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoWarp
Get/Set the warp of the rho (radius) domain.
Note:: Warping your radius domain will also affect your grid lines, so you may
need to follow this setter with link::#-rhoGridLines:: or
link::#-rhoGridLinesAt:: depending if you prefer specific rho spacing or pixel
spacing.
::

ARGUMENT:: warpOrNum
A link::Classes/Warp::, or one of it's subclasses, or a
link::Classes/Number::, which will be interpreted as a
link::Classes/CurveWarp::, as with link::Classes/Env::.


METHOD:: plotUnits
Get or set the units used to display the data: code::\db:: or code::\scalar::.

The data you set need not match the plot's units, your data
units are set through the link::#-data:: method, and is converted to the plot's
units for display.

ARGUMENT:: dbOrScalar
A link::Classes/Symbol::: code::\db:: or code::\scalar::.

ARGUMENT:: min
The minimum value at which to clip the plot levels, in link::#-plotUnits::.

ARGUMENT:: max
The maximum value at which to clip the plot levels, in link::#-plotUnits::.


METHOD:: bipolar
Set the plot to display the absolute value of the data (dB values will be
converted to scalar, take the absolute value, then back to dB),
with negative values shown as a different color. In other words, the sign of the
values is indicated through color. Colors of negative values are set by the
link::#-plots#negativeColors:: attribute of the link::#-plots:: layer. For
example, a figure-of-eight microphone response pattern would be displayed with a
link::#-rhoSpec:: range of code::[0, 1]::, but the positive and negative phase
lobes would each be drawn with a different color.
Note:: If you have specified your dataset to have individual colors for each
datapoint, this will be ingnored in bipolar mode, and the first color from the
color array for that dataset is used.::

ARGUMENT:: bool
A link::Classes/Boolean:: indicating whether the data should be displayed as
bipolar or not.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: clipDbLow
Set/get the minimum dB level to clip link::#-rhoMin:: when using code::\db:: as
your link::#-plotUnits::. The reason for clipping this value is
code::0.ampdb = -inf::, which breaks link::Classes/ControlSpec::, so this will
catch and clip code::-inf::.  Default code::-90::.



SUBSECTION:: Setting Plot Data

METHOD:: data
Set the data to plot.

ARGUMENT:: dataArray
An link::Classes/Array:: of values to plot. If the array is 2D, the data is
considered to be multichannel and will plot the values of each sub-array.

ARGUMENT:: thetaArray
An link::Classes/Array:: of values corresponding to angular positions of each
data point. 2D arrays are treated the same as in strong::dataArray::.

If code::thetaArray.size < dataArray.size::, then sub-arrays
code::dataArray[i]:: are associated with code::thetaArray.wrapAt(i)::.

If the size of each sub-array in strong::thetaArray:: doesn't match the size of
its associated sub-array in strong::dataArray::, the elements are considered
breakpoints of an link::Classes/Env::, and the data points are mapped into that
envelope. For example a strong::dataArray:: of size 100 paired with a
strong::thetaArray:: of code::[0, 2pi]:: would uniformly distribute all 100 values
of strong::dataArray:: into the range of code::0:: to code::2pi::.

If code::nil::, dataArray is mapped evenly into the range
code::[thetaMin, thetaMax]::.

ARGUMENT:: units
A link::Classes/Symbol:: indicating the units of the data in strong::dataArray:::
code::\db:: or code::\scalar::. This is independent of link::#-plotUnits::.
Default code::\scalar::.

ARGUMENT:: bipolar
A link::Classes/Boolean::, specifying whether the data should be considered
bipolar, where data is plotted as values, and color indicates polarity/phase.
See link::#-bipolar::. Default is code::false::.

ARGUMENT:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.



SUBSECTION:: Appearance


METHOD:: plotRadius
Get/set the normalized value of the plot radius.

ARGUMENT:: normRadius
A value normalized to the radius of the view (the half-length of its smallest
side), where code::1.0:: would extend the plot radius to the edge of the view.
Default code::0.9::.
Note:: The labels of the link::#-thetaGridLines:: displayed on the edge of the
link::#-grid:: are drawn just outside the plot's radius, so use a value less
than code::1.0:: to allow room for these labels if you plan to include labels
for the theta grid lines.::


METHOD:: background
Get/set the background color of the view.

ARGUMENT:: color
A link::Classes/Color::.



SUBSECTION:: Fine Tuning Appearance

The plot is comprised of multiple layers, each with their own settable
attributes: background, scale grid, data plots, title, and legend. Each drawing
layer has a code::*properties:: list (an link::Classes/Event::), the keys of
which can be accessed as pseudo-methods for getting and setting their values.
Setting an attribute automatically refreshes the view. For example:
code::
// assuming you've created a PolarView 'myPolarPlot'
myPolarPlot.title.show = false;    // hide the title box layer
myPolarPlot.grid.strokeWidth = 2;  // set the stroke width of the grid layer to 2 pixels
::


METHOD:: grid
Return the grid line drawing layer (a link::Classes/PolarGridLayer::),
The grid layer is drawn first (bottommost layer) and has the following attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show           || code::true:: || show the grid layer or not
## fill           || code::true:: || fill the grid or not
## fillColor      || code::Color.white:: || link::Classes/Color:: to fill the grid
## showRhoLines   || code::true:: || show the rho (latitude) grid lines or not
## showThetaLines || code::true:: || show the theta (longitude) grid lines or not
## strokeWidth    || code::1:: || stroke width of grid lines
## strokeColor    || code::Color.gray.alpha_(0.4):: || stroke link::Classes/Color:: of grid lines
## showRhoVals    || code::true:: || show the value of the rho grid lines
## showThetaVals  || code::true:: || show the value of the theta grid lines
## rhoTxtOrientation || code::\horizontal:: || code::\horizontal:: for horizontal labels regardless of code::rhoTxtAng::,

code::\radial:: to be tangent to the rho line
## rhoTxtAlign    || code::\inside:: || text placement relative to rho grid lines: code::\inside::, code::\outside::, code::\on::
## rhoTxtAng      || code::0:: || the angle to align the text of the rho grid line values
## rhoTxtRound    || code::0.01:: || the resolution of the rho grid line values to display
## rhoTxtColor    || code::Color.gray.alpha_(0.4):: || the link::Classes/Color:: of the rho grid line values text
## thetaTxtRound  || code::1:: || the resolution of the theta grid line values to display
## thetaTxtWrap   || code::[ 0, 2pi ]:: || the values around which to wrap the text of

the theta grid lines
## thetaTxtOffset || code::0.065:: || the offset of the theta grid lines text from the edge

of the plot, normalized to the radius length
## thetaTxtUnits  || code::'degrees':: || units to display for theta lines values:

code::\degrees::, code::\radians::, or code::\pi::
## thetaTxtColor  || code::Color.gray.alpha_(0.4):: || the link::Classes/Color:: of the theta grid line values text
::

METHOD:: plots
Return the drawing layer responsible for drawing the data plots
(a link::Classes/PolarPlotLayer::). The plot layer is drawn drawn over the
grid layer and has the following attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show           || code::true:: || show the plots or not
## strokeTypes    || code::[ \line ]:: || an link::Classes/Array:: of code::\line::, code::\points::, or a code::FloatArray:: specifying a

dashed line, e.g. code::FloatArray.with(5, 2, 3, 2):: creates a

dashed line alternating 5px, 3px lines separated by 2px
## plotColors     || code::[ Color.blue ]:: || an link::Classes/Array:: of link::Classes/Color::s, one for each plot,

or an link::Classes/Array:: of link::Classes/Array::s containing link::Classes/Color::s, one for

each data point in a plot (not available when link::#-bipolar:: is code::true::)
## negativeColors || code::[ 0.09 ]:: || an link::Classes/Array:: of link::Classes/Color::s, for the negative-valued portion

of each plot, if code::bipolar == true::. You can also specify a

link::Classes/Number:: which will act as a hue shift by that amount (0..0.999).
## strokeWidth    || code::2:: || stroke width of the lines or points of the plots
## pointRad       || code::2:: || if stroke type is code::\points::, circles have strong::pointRad:: radius, in pixels,

if code::nil::, strong::pointRad:: is strong::strokeWidth::
## fillPoints     || code::false:: || if stroke type is code::\points::, fill them or not
## fill           || code::false:: || fill the area under the plots or not
## fillAlpha      || code::0.3:: || an alpha value to apply to the strong::plotColors:: used

to fill the area under each plot
::

METHOD:: title
Return the drawing layer responsible for drawing the title bar (a
link::Classes/PolarTitleLayer::), which has
the following attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::true:: || show the title bar or not
## fill        || code::true:: || fill the bakcground of the title bar or not
## inset       || code::10:: || space between the title box and the edge of the view, in pixels
## txt         || code::plot:: || the link::Classes/String:: to display, newline characters, code::"\n"::, are valid

for creating multiple lines
## font        || code::Font("Helvetica"):: || title's link::Classes/Font::
## fontSize    || code::18:: || title's font size
## txtColor    || code::Color.gray:: || link::Classes/Color:: of the title text
## margin      || code::15:: || space between the border of the title box and the text, in pixels
## fillColor   || code::Color.white:: || background fill link::Classes/Color:: of the title box
## showBorder  || code::true:: || show the title box's border or not
## borderWidth || code::1:: || pixel width of the title border
## borderColor || code::Color.gray:: || link::Classes/Color:: of the title border
::

METHOD:: legend
Return the drawing layer (a link::Classes/PolarLegendLayer::), which has
the following attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::true:: || show the legend or not
## labels      || code::[  ]:: || an link::Classes/Array:: of link::Classes/String::s, one for each data plot, in the order

defined in link::#-data::.
## align       || code::\bottomRight:: || where to align the legend in the view: code::\right::, code::\left::, code::\top::,

code::\bottom::, code::\topRight::, code::\topLeft::, code::\bottomRight::, code::\bottomLeft::
## layout      || code::\vertical:: || layout of the lines/labels: code::\vertical:: or code::\horizontal::
## inset       || code::10:: || space between the legend and the edge of the view, in pixels
## margin      || code::10:: || space between the border of the legend and the lines/text, in pixels
## spacing     || code::8:: || spacing between labels, in pixels
## lineLength  || code::15:: || length of the sample lines, in pixels
## lineSpacing || code::6:: || spacing between sample line its corresponding label text, in pixels
## font        || code::Font("Helvetica"):: || link::Classes/Font:: of the labels
## fontSize    || code::14:: || font size of the labels
## txtColor    || code::Color.gray:: || link::Classes/Color:: of the text labels
## fillColor   || code::Color.white:: || link::Classes/Color:: to fill the background of the legend
## showBorder  || code::true:: || show a border around the legend or not
## borderWidth || code::1:: || stroke width of the border around the legend
## borderColor || code::Color.gray:: || link::Classes/Color:: of the border around the legend
::



SUBSECTION:: Internal: data


METHOD:: scalarData
Return the plot data in scalar values. I.e. if link::#-data:: was set with
code::\db:: values, link::#-scalarData:: returns code::data.dbamp::.


METHOD:: plotData
Get the data stored internally for plotting, unmapped (normalized 0 .. 1) from
link::#-plotSpec::.


METHOD:: thetas
Return an link::Classes/Array:: of the theta positions of the data points. Used
internally and by the drawing layer classes.



SUBSECTION:: Internal: layout


METHOD:: cen
Returns a link::Classes/Point:: centered in the area of the view in which the
plot is drawn.


METHOD:: bnds
Returns the link::Classes/Rect:: describing the area of the view in which the
plot is drawn.


METHOD:: minDim
Returns the minimum pixel dimension of the area of the view in which the plot is
drawn.


SUBSECTION:: Other

METHOD:: export
Export the plot to an image file.

ARGUMENT:: fileName
A link::Classes/String:: that is the name of the file, including the extension.
The extension isn't necessary, but you'll then need to specify the
strong::format:: and the file will be written without an extension.

ARGUMENT:: directory
A link::Classes/String:: that is the directory into which the file will be
written. Default is the user home directory, code::Platform.userHomeDir::.

ARGUMENT:: format
An optional link::Classes/String:: of the format to use.
code::Image.formats:: lists supported formats.
If code::nil::, the format will be inferred from the path extension (the
default).

ARGUMENT:: quality
The quality factor in the range code::0::, small compressed files, to
code::100::, large uncompressed files, or code::-1::, the default settings.
Default is code::-1::.

ARGUMENT:: finishCond
An optional link::Classes/Condition:: which will be set code::true:: and signal
when the image has been written.


PRIVATE:: prStartAngle, prZeroPos, prRescalePlotData, prPlotRad, prThetaLines, prPlotCen, prSweepLength, drawInThisOrder, defineMouseActions, init, drawFunc, dirFlag, prThetaGridLinesAt, prRhoGridLinesAt

EXAMPLES::

code::
(some example code)
::
