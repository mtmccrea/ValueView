TITLE:: RotaryView
summary:: A UI view that mimics a rotary-style encoder.
categories:: GUI>Views
related:: Classes/ValueView, Classes/Knob

DESCRIPTION::
A GUI view that mimics a rotary-style encoder, similar to link::Classes/Knob::,
but fully customizable, including optionally a full 360-degree continuous range.

The view works in much the same was at other SC widgets, but has additional
capabilities to notify dependents of changes, and the appearance is extensively
customizable via numerous drawing layers with settable properties.

CLASSMETHODS::

METHOD:: new
Create a new link::Classes/RotaryView::.

argument:: parent
A link::Classes/Window:: or link::Classes/View::, in which to embed this view.
If code::nil::, a window will be created to hold the view.

argument:: bounds
A link::Classes/Rect:: describing the bounds of this view within its
strong::parent::. If strong::parent:: is code::nil::, the
link::Classes/Rect:: specifies the dimensions of the newly created
link::Classes/Window:: and its location on the screen.

argument:: spec
A link::Classes/ControlSpec:: that will control the range and warping of your
value. link::#-input:: is the unmapped link::#-value::. If code::nil::, a
code::\unipolar:: spec is created.
Note::: The strong::step:: of
the provided link::Classes/ControlSpec:: will determine the step resolution of
the rotary when changing the value with a mouse or arrow key (default is
code::0::, i.e. highest step resolution possible).
See link::Classes/RotaryView#Example: radio dial::.
::

argument:: initVal
The initial link::#-value:: within range of the strong::spec:: when the view
is first drawn.

argument:: startAngle
The angular position of the start of the rotary's range, in radians. Default
is code::0::. Can be negative.
Reference code::0:: position is up, 12 o'clock, and advances according to
strong::direction:: (default clockwise).

argument:: sweepLength
The range of motion of the rotary, in radians. Default is code::2pi::.

argument:: innerRadiusRatio
A value from code::(0..1):: determining radius of the the inner edge of the
rotary. Default is code::0::.

argument:: outerRadiusRatio
A value from code::(0..1):: determining radius of the the outer edge of the
rotary, where code::1:: is the maximum radius given the size of the view.
Default is code::1::.

argument:: direction
A link::Classes/Symbol::, code::\cw:: or code::\ccw::, clockwise and
counterclockwise, respectively, indicating the direction of positive movement,
for both value changes as well as affecting how strong::startAngle:: is
determined.

returns:: A link::Classes/RotaryView::.



INSTANCEMETHODS::


COPYMETHOD:: ValueView -value
COPYMETHOD:: ValueView -input

COPYMETHOD:: ValueView -valueAction
COPYMETHOD:: ValueView -inputAction
COPYMETHOD:: ValueView -doAction
COPYMETHOD:: ValueView -suppressRepeatedAction


METHOD:: spec
Get/set the link::Classes/ControlSpec:: used to both map the
link::#-input:: and constrain the link::#-value::. Note: the strong::step:: of
the provided strong::controlSpec:: will determine the step resolution of the
rotary.

argument:: controlSpec
A link::Classes/ControlSpec::.

argument:: updateValue
A link::Classes/Boolean:: specifying whether the link::#-value::
(and link::#-input::) should be updated when the new strong::controlSpec:: is
set. Default is code::true::.



SUBSECTION:: User interaction


METHOD:: continuous
A link::Classes/Boolean:: which determines if the rotary behaves like a
continuous encoder, wrapping values around its link::#-spec:: range when
crossing min/max values. Useful for full code::2pi:: range rotary controls.
Synonym for link::#-wrap::. Default is code::false:: (values are clipped to
range).
Note:: If link::#-orientation:: is code::\circular:: the rotary behavior is
always continuous, even if link::#-continuous:: is code::false::.
::


METHOD:: clickMode
Set how mouse clicking changes the rotary position:
argument:: value
table::
## code::\absolute:: || jumps to the  value where it is clicked
## code::\relative:: || the value changes relative to the

mouse movement once clicked.
::


METHOD:: orientation
Set how mouse dragging changes moves the rotary position.
Note:: If link::#-orientation:: is code::\circular:: the rotary behavior is
always continuous, even if link::#-continuous:: is code::false::.
::

argument:: vertHorizOrCirc
table::
## code::\vertical:: || value changes according to vertical mouse movement
## code::\horizontal:: || value changes according to horizontal mouse movement
## code::\circular:: || value follows the radial movement around the rotary
::


COPYMETHOD:: ValueView -rangeInPixels
COPYMETHOD:: ValueView -valuePerPixel

COPYMETHOD:: ValueView -scroll
COPYMETHOD:: ValueView -scrollStep
COPYMETHOD:: ValueView -xScrollDir
COPYMETHOD:: ValueView -yScrollDir

COPYMETHOD:: ValueView -keyStep
COPYMETHOD:: ValueView -keyDirLR
COPYMETHOD:: ValueView -keyDirUD


SUBSECTION:: Bipolar mode


METHOD:: bipolar
Get/set how the rotary fills the color up to the current value. If
code::false::, the color is always filled from the minumum value in the range
up to the current value. If code::true::, the color is filled from the
link::#-centerValue:: to the current value. See
link::Classes/RotaryView#Example: bipolar mode:: and
link::#Example: continuous encoder::.

argument:: bool
A link::Classes/Boolean::.


METHOD:: centerValue
Get/set the link::Classes/Number:: that is the "center" of the bipolar axis.
See link::Classes/RotaryView#Example: bipolar mode:: and
link::#Example: continuous encoder::.

argument:: value
A link::Classes/Number:: in the range of the link::#-spec::.



SUBSECTION:: Ticks


METHOD:: numTicks
Set the number of ticks to be displayed evenly across the full range of the
rotary. See link::#Examples: radio dial:: and
link::#Example: continuous encoder::.

argument:: num
An link::Classes/Integer::. The total number of ticks (major and minor).

argument:: majorEvery
An link::Classes/Integer::. Frequency of major ticks. E.g.
strong::majorEvery:: = code::3:: would make a tick pattern of
major-minor-minor-major-minor-minor-etc. See link::#-ticks:: layer for
setting other properties about ticks.

argument:: startAndEnd
A link::Classes/Boolean::, whether the first and last tick fall at the start
and end of the range. E.g. If the link::#-sweepLength:: is code::2pi::, you
wouldn't want the last tick to fall at the end of the range, as it would
overlap with the first. See link::#Example: continuous encoder::.


METHOD:: ticksAt
Set the position of major and minor ticks, in radians.

argument:: majorRadPositions
An link::Classes/Array:: of radian values, relative to link::#-startAngle:: and
link::#-direction::, for the major ticks.

argument:: minorRadPositions
An link::Classes/Array:: of radian values, relative to link::#-startAngle:: and
link::#-direction::, for the minor ticks.


METHOD:: ticksAtValues
Set the position of major and minor ticks, in the units of your
link::#-spec::. See link::#Examples: bipolar mode::.

argument:: majorVals
An link::Classes/Array:: of values for the major ticks, within the range of
your link::#-spec::.

argument:: minorVals
An link::Classes/Array:: of values for the minor ticks, within the range of
your link::#-spec::.


METHOD:: ticksEveryVal
Set the ticks at an even interval, in the units of your
link::#-spec::, specifying the steps between each major tick.
See link::#Example: continuous encoder::.

argument:: valueHop
A link::Classes/Number:: specifying the interval, or "hop", between each tick.

argument:: majorEvery
An link::Classes/Integer:: specifying the steps of major ticks.



SUBSECTION:: Layout


METHOD:: direction
Get/set the direction of positive movement, for both value changes as well as
affecting how link::#-startAngle:: is determined.

argument:: dir
A link::Classes/Symbol::, code::\cw:: or code::\ccw::, clockwise and
counterclockwise, respectively.


METHOD:: dirFlag
Get the value corresponding to the rotary's direction: clockwise = code::1::,
counterclockwise = code::-1::.


METHOD:: innerRadiusRatio
Set/get the radius of the the inner edge of the rotary.

argument:: ratio
A value from code::(0..1)::.


METHOD:: outerRadiusRatio
Set/get the radius of the the outer edge of the rotary, where code::1:: is the
maximum radius given the size of the view.

argument:: ratio
A value from code::(0..1)::


METHOD:: startAngle
Get/set the angular position of the start of the rotary's range, in radians.
Reference code::0:: position is up, 12 o'clock, and advances according to
link::#-direction::.

argument:: radians
A link::Classes/Number:: in radians, can be negative.


METHOD:: sweepLength
Get/set the range of motion of the rotary, in radians. Default is code::2pi::.

argument:: radians
A A link::Classes/Number:: in radians.


SUBSECTION:: Drawing layers: fine tuning appearance

The rotary is comprised of multiple layers, each with their own settable
attributes: range, level, text, ticks, handle, and outline. Each drawing
layer has a code::*properties:: list (an link::Classes/Event::), the keys of
which can be accessed as pseudo-methods for getting and setting their values.
Setting an attribute automatically refreshes the view. For example:
code::
// assuming you've created a RotaryView 'myRotary'
myRotary.handle.style = \arrow;  // make the rotary's "handle" an arrow
myRotary.text.show = false;      // hide the text of the rotary's value
::

METHOD:: range
The layer showing the range of the rotary. Some parameters apply only for a
certain code::style::. If code::style == \wedge::, an annularWedge is drawn
for the range. If code::style == \arc:: a stroked arc is used.
table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::true:: || show the range layer or not
## style       || code::\wedge:: || code::\arc:: or code::\wedge:: (an annularWedge); if code::\arc::, the width

follows strong::width::, not strong::strokeWidth::
## radius      || code::1:: || code::(0..1)::, radius of outer edge of the wedge or arc
## width       || code::1:: || code::(0..1):: width of range display, relative to code::wedgeWidth::

(code::outerRadiusRatio - innerRadiusRatio::)
## fill        || code::true:: || fill the range or not
## fillColor   || code::Color(0.9,0.9,0.9):: || color to fill the range
## stroke      || code::false:: || stroke the range or not
## strokeType  || code::\around:: || if strong::style:: code::== \wedge::; code::\inside::, code::\outside::, code::\around::, or code::\insideOutside::
## strokeColor || code::Color:: || stroke color of the range
## strokeWidth || code::1:: || if strong::style:: code::== \wedge::; if code::< 1::, assumed to be a normalized value

and changes with view size, else treated as a pixel value
## joinStyle   || code::0:: || if strong::style:: code::== \wedge::; code::\miter::; code::\round::, code::\bevel::, or

an link::Classes/Integer:: of the link::Classes/Pen#*joinStyle::
## capStyle    || code::\round:: || if strong::style:: code::== \arc::; code::\butt::, code::\flat::, code::\round::, code::\square::, or

an link::Classes/Integer:: of the link::Classes/Pen#*capStyle::
::


METHOD:: level
The layer showing the level of the rotary. If code::style == \wedge::, an
annularWedge is drawn for the range. If code::style == \arc:: a stroked arc
is used.
table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::true:: || show the level layer or not
## style       || code::\wedge:: || code::\arc:: or code::\wedge:: (an annularWedge); if code::\arc::, the width

follows strong::width::, not strong::strokeWidth::
## radius      || code::1:: || code::(0..1)::, radius of outer edge of the wedge or arc
## width       || code::1:: || code::(0..1):: width of range display, relative to code::wedgeWidth::
## fill        || code::true:: || fill the level or not
## fillColor   || code::Color.white:: || color to fill the level;
## stroke      || code::true:: || stroke the level or not
## strokeType  || code::\around:: ||  if strong::style:: code::== \wedge::; code::\inside::, code::\outside::, code::\around::, or code::\insideOutside::
## strokeColor || code::Color.gray:: || stroke color of the level
## strokeWidth || code::0.025:: || if strong::style:: code::== \wedge::; if code::< 1::, assumed to be a normalized value
## joinStyle   || code::0:: || if strong::style:: code::== \wedge::; code::\miter::; code::\round::, code::\bevel::, or

an link::Classes/Integer:: of the link::Classes/Pen#*joinStyle::

and changes with view size, else treated as a pixel value
## capStyle    || code::0:: || if strong::style:: code::== \arc::; code::\butt::, code::\flat::, code::\round::, code::\square::, or

an link::Classes/Integer:: of the link::Classes/Pen#*capStyle::
::


METHOD:: text
The layer showing the text of the rotary's current value.
table::
## strong::attribute:: || strong::default:: || strong::description::
## show     || code::true:: || show the text layer or not
## align    || code::\center:: || code::\top::, code::\bottom::, code::\center::, code::\left::, code::\right::, or a link::Classes/Point:: on which

to center the text, in a range of code::(0..1)::

where top-left is code::0@0::, bottom-right is code::1@1::
## round    || code::0.1:: || a link::Classes/Number:: to round the value display to
## fontSize || code::0.1:: || font size
## fontName || code::"Helvetica":: || a link::Classes/String::, the font name
## color    || code::Color.gray:: || link::Classes/Color:: of the text
::



METHOD:: ticks
The layer showing the ticks of the rotary. The number and position of ticks
are set through link::#-numTicks::, link::#-ticksAt::, link::#-ticksAtValues::,
or link::#-ticksEveryVal::.

table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::false:: || show the tick layer or not
## anchor      || code::0.97:: || code::(0..1):: position/radius where the ticks are "anchored",

relative to outer edge of rotary
## align       || code::\inside:: || the position of the ticks relative to strong::anchor::;

code::\inside::, code::\outside::, or code::\center::
## majorLength || code::0.25:: || length of major ticks, code::(0..1):: realtive to code::maxRadius::
## minorLength || code::0.1:: || length of major ticks, code::(0..1):: realtive to code::maxRadius::
## majorWidth  || code::0.05:: || width of major tick, in pixels unless code::< 1::,

in which case relative to radius
## minorWidth  || code::0.025:: || width of major tick, in pixels unless code::< 1::,

in which case relative to radius
## majorColor  || code::Color.gray:: || link::Classes/Color:: of the major ticks
## minorColor  || code::Color.gray:: || link::Classes/Color:: of the minor ticks
## capStyle    || code::\round:: || code::\butt::, code::\flat::, code::\round::, code::\square::,

or an link::Classes/Integer:: of the link::Classes/Pen#*capStyle::
::


METHOD:: handle
The layer showing the "handle" of the rotary. Some properties are only valid
for certain strong::style::s.
table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::true:: || show the handle layer or not
## style       || code::'line':: || code::\line::, code::\circle::, or code::\arrow::
## anchor      || code::0.9:: || reference radius of for drawing the anchor strong::align::, code::(0..1)::
## align       || code::'inside':: || code::\inside::, code::\outside::, or code::\center:: on the strong::anchor::
## length      || code::0.3:: || if strong::style:: code::== \line:: or code::== \arrow::, code::(0..1):: relative to radius
## width       || code::0.6:: || if strong::style:: code::== \arrow::, code::(0..1):: relative to strong::length::
## stroke      || code::true:: || if strong::style:: code::== \circle:: or code::== \arrow::, stroke the handle or not
## strokeColor || code::Color.black:: || stroke link::Classes/Color:: of the handle
## fill        || code::true:: || if strong::style:: code::== \circle:: or code::== \arrow::, fill the handle or not
## fillColor   || code::Color.red:: || fill link::Classes/Color:: of the handle
## joinStyle   || code::'round':: || if strong::style:: code::== \arrow::, code::\miter::, code::\round::, code::\bevel::,

or an link::Classes/Integer:: of the link::Classes/Pen#*joinStyle::
## radius      || code::0.1:: || if strong::style:: code::== \circle::, in pixels unless code::< 1::,

in which case relative to radius
## capStyle    || code::'round':: || if strong::style:: code::== \line::, code::\butt::, code::\flat::, code::\round::, code::\square::,

or an link::Classes/Integer:: of the link::Classes/Pen#*capStyle::
## strokeWidth || code::0.05:: ||  width of stroke, in pixels, unless code::< 1::, then relative to radius

in which case relative to radius
::


METHOD:: outline
The layer showing the outline of the rotary. It's called "outline", but need
not be on the perimeter—it's essentially a circle of variable size/fill that
can serve as an outline or visual accent. It's the topmost layer.
table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::false:: || show the outline layer or not
## radius      || code::1:: || code::(0..1)::, relative to radius
## stroke      || code::true:: || stroke or not
## strokeColor || code::Color.black:: || stroke link::Classes/Color:: of the outline
## strokeWidth || code::2:: || in pixels unless code::< 1::,

in which case relative to radius
## rangeOnly   || code::false:: || a link::Classes/Boolean:: whether outline is constrained

to the rotary's range, or is a full circle
## capStyle    || code::flat:: || if strong::rangeOnly:: code::== \true::, code::\butt::, code::\flat::, code::\round::, code::\square::,

or an link::Classes/Integer:: of the link::Classes/Pen#*capStyle::
## fill        || code::false:: || fill or not
## fillColor   || code::Color.white:: || fill link::Classes/Color:: of the outline layer
::


PRIVATE:: prStartAngle, prSweepLength, prCenterAngle, setPrCenter, levelSweepLength, drawInThisOrder, respondToAbsoluteClick, init, respondToLinearMove, drawFunc, defineMouseActions, bnds, cen, maxRadius, innerRadius, outerRadius, wedgeWidth, respondToCircularMove, minTicks, majTicks, centerNorm


SECTION:: Examples

SUBSECTION:: Example: bipolar mode
code::
// bipolar rotary for gain control: boost (green) and cut (red)
(
var setupRot, numRots = 8;
r = RotaryView(bounds: Size(300, 300).asRect,
	spec: [-90, 12, \db].asSpec,
	initVal: 0,
	startAngle: pi, sweepLength:  pi,
	innerRadiusRatio: 0.3,
	outerRadiusRatio: 0.95
).front;

r.bipolar_(true).centerValue_(0); // bipolar center at 0dB

// range
r.range.fillColor_(Color.new(0.9,0.9,0.9));

// assign bipolar colors
r.level.strokeColor = { |p| if (p.val < 0) { Color.red } { Color.green } };
r.level.fillColor = { |p| if (p.val < 0) { Color.red.alpha_(0.2) } { Color.green.alpha_(0.2) } };
r.level.strokeType_(\outside).strokeWidth_(0.05);

// handle
r.handle.strokeColor_(Color.gray.alpha_(0.4)).anchor_(1).length_(1);

// text
r.text.fontSize_(0.2).align_(0.65@0.5).color_(Color(*0.6!3));

// ticks
r.ticks.show_(true).majorColor_(Color.gray).majorWidth_(0.05).minorWidth_(0.02).capStyle_(\round);
r.ticksAtValues_([0], (-24, -21 .. 12));
)
::

SUBSECTION:: Example: radio dial
code::
/* radio dial */
(
r = RotaryView(bounds: Size(300, 300).asRect,
	spec: ControlSpec(1,5),
	startAngle: -0.7pi,
	sweepLength: 1.4pi,
	innerRadiusRatio: 0.2,
	outerRadiusRatio: 0.9,
).front;

// action: post self, value, and normalized input
r.action = {|v, value, input| [v, value, input].postln};

// handle style: arrow
r.handle.style_(\arrow).joinStyle_(\ropund);
r.handle.length_(0.5).width_(0.6).anchor_(0.95).strokeColor_(Color.red.val_(0.5));

// appearance
r.level.show = false; // turn off the level display
r.numTicks_(5, majorEvery: 1); // 5 positions
r.ticks.show_(true).majorLength_(0.3).majorWidth_(1.5).majorColor_(Color(*0.5.dup(3)));
r.text.align_(0.5@0.8).fontName_("Monaco").fontSize_(0.18);

// behavior
r.spec.step = 1; // spec's step determins how the dial clicks into each position
r.clickMode = \absolute;   // value follows mouse down position (default)
r.orientation = \circular; // makes sense for a radio dial (default)
)


/* a variation: handle, outline, level */
(
r.range.fill_(false).stroke_(true).strokeType_(\insideOutside);
r.handle.style_(\line).capStyle_(\round).anchor_(0.5).align_(\center).length_(0.45).strokeWidth_(0.04);
r.ticks.majorLength_(0.1).anchor_(0.5).align_(\center);
r.level.show_(true).stroke_(false).fill_(true).fillColor_(Color.red.alpha_(0.2));
)


/* a variation: handle, function for a property */
(
r.innerRadiusRatio_(0); // no center gap
r.range.fill_(false).stroke_(true).strokeWidth_(0.025).strokeType_(\outside).strokeColor_(Color(*0.5.dup(4)));
r.ticks.majorLength_(0.1).anchor_(0.7).align_(\center).majorColor_(Color(*0.5.dup(4)));
r.handle.style_(\circle).radius_(0.33);
r.handle.anchor_(0.7).align_(\center);
r.handle.fill_(true).stroke_(false);
r.handle.fillColor = { |p|
	Color.hsv(p.input * 0.999, 0.9, 1, 0.4) // color changes with position
};
r.text.show = false;
r.level.show = false;
)


/* a variation: change steps/ticks */
(
r.spec.step = 0.5;
r.numTicks_(9, majorEvery: 2, startAndEnd: true);
r.ticks.majorLength_(0.3).minorLength_(0.2);
r.ticks.majorColor_(Color(*0.5.dup(4))).minorColor_(Color(*0.2.dup(4)));
r.ticks.majorWidth_(0.03).minorWidth_(0.01);
)

// default behavior is to perform the action only if the value is new:
r.suppressRepeatedAction; // >> true
// this filtering can be turned off so the action will be performed
// on every mouse move, even if it's the same value
r.suppressRepeatedAction = false; // observe output while dragging
::

SUBSECTION:: Example: continuous encoder
code::
/* continuous encoder: output degrees */
(
var col = Color.hsv(0.6,1,1);
r = RotaryView(bounds: Size(300, 300).asRect,
	spec: [0, 360].asSpec,
	innerRadiusRatio: 0,
	direction: \ccw
).front;

// Note: numTicks is a view method, not ticks layer property
r.numTicks_(16, 2, startAndEnd: false);

r.action = { |view, val, input| "new value: %\n".postf(val) };

r.clickMode = \absolute;   // (default)
r.orientation = \circular; // (default)
r.continuous = true;       // wrap through the zero crossing
r.scrollStep_(0.01);       // percentage of the full range for each scroll step
r.keyStep_(20.reciprocal); // percentage of the full range for each key step,
                           // i.e. 20 keystrokes over the full range
// range
r.range.show_(true).stroke_(false).fillColor_(Color(0.9,0.9,0.9));

// level
r.level.fill_(false);
r.level.show_(true).strokeWidth_(0.02).strokeColor_(col).strokeType_(\outside);

// handle
r.handle.style_(\line).anchor_(0.9).align_(\inside).length_(0.3);
r.handle.strokeWidth_(0.1).strokeColor_(col);

// value text
r.text.fontSize_(0.2).color_(col);
r.text.align = 0.5@0.51;  // slightly better center position
r.text.round = 0.1;       // round the value of the displayed text

// ticks
r.ticks.show_(true).anchor_(0.9).align_(\inside).capStyle_(\round);
r.ticks.majorLength_(0.1);
r.ticks.majorWidth_(0.02).minorWidth_(0.015);
r.ticks.minorColor_(col.copy.alpha_(0.2)).majorColor_(col);

// set the value
r.value = 270;
)

// a bipolar variation
(
r.spec = ControlSpec(-180, 180);
r.bipolar = true;
r.centerValue = 0;
r.startAngle = pi;
r.sweepLength = 2pi;
r.ticksEveryVal_(22.5, 2); // Note: ticksEveryVal is a view method
r.ticks.majorColor_(       // while majorColor is a property of ticks layer
	Color.hsv(0.6,1,1,0.4)
);
)
::

code::
/* another continuous encoder: simple, good for small size */
(
r = RotaryView(
	bounds: Size(100, 100).asRect,
	spec: [0, 2pi].asSpec,
	innerRadiusRatio: 0
).front;

r.action = { |view, val, input| [val, input].postln };

// range
r.range.stroke_(false);
r.range.fillColor = Color.new(0.9,0.9,0.9).alpha_(0.8);

// handle
r.handle.show_(true).strokeColor_(Color.green);
r.handle.style_(\arrow).length_(0.6).anchor_(0.65);
r.handle.stroke_(true).strokeWidth_(0.05).joinStyle_(\round);
r.handle.strokeColor = Color.hsv(0.27, 0.9, 0.8);
r.handle.fillColor = Color.hsv(0.27, 1, 0.8);

// level
r.level.show = false;

// value text
r.text.show = false;
r.text.round = 0.1;  // round the value of the displayed text

// ticks
r.numTicks_(360/22.5, 2, startAndEnd: false); // Note: numTicks is a view method
r.ticks.show_(true).capStyle_(\round).anchor_(0.9);
r.ticks.minorColor_(Color.new255(*200!3)).majorColor_(Color.new255(*150!3));
r.ticks.majorLength_(0.1).minorLength_(0.08);
r.ticks.majorWidth_(0.09);

// outline to create an inner circle
r.outline.show_(true).radius_(0.7).strokeWidth_(0.015);
)
::

SUBSECTION:: Example: level dial
code::
/* like SC's Knob */
(
r = RotaryView(
	bounds: Size(300, 300).asRect,
	innerRadiusRatio: 0,
	startAngle: -0.8pi,
	sweepLength: 1.6pi
).front;

r.action = { |view, val, input| [val, input].postln };

// outline used as inner circle, note radius
r.outline.show_(true).radius_(0.75);
r.outline.fill_(true).fillColor_(Color.white.alpha_(0.3));
r.outline.stroke_(true).strokeColor_(Color.gray).strokeWidth_(0.04);

// note anchor is inside the outline's radius (0.75)
r.handle.style_(\line).capStyle_(\round).strokeWidth_(0.13).anchor_(0.55).length_(0.45);

// range and level form the level "meter"
// with arc style instead of an annular wedge
r.level.style_(\arc).width_(0.1).capStyle_(\round).fillColor_(Color.green);
r.range.style_(\arc).width_(0.1).capStyle_(\round).fillColor_(Color.white);

r.text.show = false;
)
::

SUBSECTION:: Example: panner
code::
(
r = RotaryView(
		bounds: Size(300, 300).asRect,
		spec: [-1, 1].asSpec,
		initVal: -0.3,
		startAngle: -pi/2,
		sweepLength: pi,
		innerRadiusRatio: 0.3
	).front;

r.dragMode = \horizontal; // mouse interaction: horizontal
r.bipolar_(true).centerValue_(0);

// level
r.level.strokeColor = {|p| if (p.val>=0) {Color.hsv(0.13,1,0.9)}{Color.green.alpha_(0.8)}};
r.level.fillColor = {|p| if (p.val>=0) {Color.hsv(0.13, 0.8, 0.92, 0.5)}{Color.green.alpha_(0.3)}};
r.level.stroke_(true).strokeWidth_(0.05).strokeType_(\outside);

// handle
r.handle.show_(true).anchor_(1).length_(1);
r.handle.strokeColor_(Color.gray.alpha_(0.4));

// text
r.text.fontSize_(0.15).align_(\center);

// ticks
r.ticks.show_(true).anchor_(0.9).capStyle_(\round);
r.ticksAtValues_(2/[-2, -4, 4, 2], 2/[-6, -3, 3, 6]);

)
::

SUBSECTION:: Example: in a layout
Multiple rotaries in a layout.
code::
(
var num = 8;
var setupRot;

setupRot = { |col|
	var r = RotaryView(
		bounds: Size(300, 300).asRect,
		spec: [10, 100, \lin].asSpec,
		startAngle: 0.75pi,
		sweepLength: 1.5pi,
		innerRadiusRatio: 0.1,
	).front;

	// range
	r.range.fillColor_(Color.new(0.9,0.9,0.9));
	r.range.stroke_(false);

	// level
	r.level.strokeColor_(col).strokeType_(\outside);
	r.level.fillColor_(col.copy.alpha_(0.2));

	// handle
	r.handle.strokeColor_(col);
	r.handle.length_(0.95).anchor_(0.97).strokeWidth_(0.05);

	// text
	r.text.fontSize_(0.15).align_(\right);

	// ticks
	r.numTicks_(15, 5);
	r.ticks.show_(true);
	r.ticks.majorWidth_(0.05).minorWidth_(0.025);
	r.ticks.anchor_(0.9).capStyle_(\flat);

	r.action = { |v, val, in| [v, val, in].postln };
	r.value_(rrand(r.spec.minval, r.spec.maxval));
};

Window(
	bounds: Rect(100,100, 140 * 8, 150)
).front.layout_(
	HLayout(
		*num.collect({ |i| setupRot.(
			Color.hsv(num.reciprocal*i, 1,1,1)
		)
		})
	)
)
)
::
