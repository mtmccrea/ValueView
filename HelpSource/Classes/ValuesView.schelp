TITLE:: ValuesView
summary:: A customizable UI view associated with multiple values and an assignable action.
categories:: GUI>Views
related:: Classes/ValueViewLayer, Classes/XYScaleView, Classes/ValuesView

DESCRIPTION::
Create a customizable UI view associated with values and assignable actions.
Like link::Classes/ValueView::, which is a view associated with just one value,
link::Classes/ValuesView:: stores multiple values and will draw a representation
of those value in whatever way you choose, updating when those values change and
notifying dependents of changed values. It uses Pen's drawing methods
using a link::Classes/UserView:: internally. The view can
optionally be made interactive to change the value as well as perform an action
when the value changes. Update rates can be limited and repeated actions can be
suppressed.


CLASSMETHODS::

METHOD:: new
Create a new link::Classes/ValuesView::.

argument:: parent
A link::Classes/Window::, link::Classes/View::, in which to embed this view.
If code::nil::, a window will be created to hold the view.

argument:: bounds
A link::Classes/Rect:: describing the bounds of this view within its
strong::parent::. If strong::parent:: is code::nil::, the
link::Classes/Rect:: specifies the dimensions of the newly created
link::Classes/Window:: and its location on the screen.

argument:: specs
An Array of link::Classes/ControlSpec::s that will control the range and
warping of your values. link::#-inputs:: are the unmapped link::#-values::.
If the array size differs from the number of strong::initVals::, it's assumed
that values' index wrap around the array of specs. If code::nil::, a
code::\unipolar:: spec is created for each of the strong::initVals::.

argument:: initVals
An Array of initial link::#-values:: when the view is first drawn. The size of
the array determines how many values this view represents

returns:: A link::Classes/ValuesView::.


INSTANCEMETHODS::



METHOD::specAt
Get/set the link::Classes/ControlSpec:: used to both map the input and
constrain the value at the strong::index:: of the array of link::#-values::.

argument:: index
The index of the value to which this spec is assigned.

argument:: controlSpec
A link::Classes/ControlSpec::.

argument:: updateValue
A link::Classes/Boolean:: specifying whether the corresponding value should be
updated when the new strong::controlSpec:: is set. Default is code::true::.



METHOD:: specs
Get the link::Classes/Array:: that holds all of the
link::Classes/ControlSpec::s used to both map the link::#-inputs:: and
constrain the link::#-values::.


COPYMETHOD:: ValueView -layers

COPYMETHOD:: ValueView -onClose

COPYMETHOD:: ValueView -mouseMoveAction


COPYMETHOD:: ValueView -mouseDownAction


COPYMETHOD:: ValueView -mouseUpAction


COPYMETHOD:: ValueView -limitRefresh


COPYMETHOD:: ValueView -refresh


COPYMETHOD:: ValueView -maxRefreshRate


COPYMETHOD:: ValueView -autoRefresh

COPYMETHOD:: ValueView -userView


METHOD:: valueAtAction
Set the value at strong::index:: of the value array and perform the
link::#-action::. This also updates the link::#-inputAt:: by unmapping from the
link::#-specAt::.

argument:: index
The strong::index:: of the value array to set.

argument:: value
A link::Classes/Number:: in the range of the link::#-specAt::. Out-of-range
values will be clipped to the link::#-specAt:: range, unless link::#-wrap:: is
code::true::, in which case the strong::value:: is wrapped into range.


METHOD:: valuesPerPixel
Get/set the link::Classes/Array:: of values for the sensitivity of mouse
interaction (and output resolution) by specifying the value change per pixel
when interacting with the view through mouse movement. The size of the array
should match the size of the link::#-values:: array.

The default for each value is code::specAt[i].range / 200::, i.e. the entire
range of each value will be covered in 200 pixels of movement.

Alternatively you can set the number of pixels which represent the full range
of a value with link::#-rangeInPixelsAt::.


METHOD:: rangeInPixelsAt
Get/set the sensitivity of mouse interaction (and output resolution) for
individual values by specifying the number of pixels that represent the value's
full range. Default is code::200::, i.e. the entire range of possible values
will be covered in 200 pixels of movement. See also link::#-valuesPerPixel::.

argument:: index
The index of the value whose sensitivity is being set.

argument:: px
The number of pixels covering the value's full range.



METHOD:: doAction
Perform the link::#-action::. Usually called through
link::#-valueAtAction::, link::#-valuesAction::, link::#-inputAtAction::,
or link::#-inputsAction::.

argument:: newValue
A link::Classes/Boolean:: determining whether the link::#-action:: is
performed. Default is code::true::. (When calling this method directly, the
argument is redundant.)


METHOD:: valueAt
Get/set the value at strong::index:: of the value array without performing the
link::#-action::. This also updates the link::#-inputAt:: by unmapping from the
link::#-specAt::.

argument:: index
The strong::index:: of the value array to set.

argument:: value
A link::Classes/Number:: in the range of the link::#-specAt::. Out-of-range
values will be clipped to the link::#-specAt:: range, unless link::#-wrap:: is
code::true::, in which case the strong::value:: is wrapped into range.

argument:: broadcast
A link::Classes/Boolean:: indicating whether the new value should be broadcast.
Default is code::true::, which is the common behavior. In exceptional cases you
may want to link::#-broadcastState:: only after setting multiple values so the
view isn't redrawn with each value update. (This is how
link::#-valuesAction:: behaves internally.)


METHOD:: inputAtAction
Set the input at strong::index:: of the input array and perform the
link::#-action::. This also updates the link::#-valueAt:: by mapping through
the link::#-specAt::.

argument:: index
The strong::index:: of the value array to set.

argument:: normInput
A value from code::(0..1)::.


METHOD:: action
Get/set the action to be performed by the view when link::#-valueAtAction::,
link::#-valuesAction::, link::#-inputAtAction::, link::#-inputsAction::,
or link::#-doAction:: are called.

argument:: actionFunc
A link::Classes/Function:: which will be
passed code::[this, this.values, this.inputs]:: as arguments.





METHOD:: wrap
Get the link::Classes/Array:: of link::Classes/Boolean::s determining whether
setting out-of-range values are wrapped within the link::#-specs:: or clipped
to its range. Set these values individually with link::#-wrapAt::.

METHOD:: wrapAt
Get/set the link::Classes/Boolean:: at a certain value index determining
whether out-of-range values are wrapped within the link::#-specAt:: or clipped
to its range. Each wrap setting is initialized to code::false::
(values are clipped).

argument:: index
Index of the value array to apply this wrap setting to.

argument:: bool
A link::Classes/Boolean::.




METHOD:: values
Get/set the values held by the view, which are the mapped counterpart
of the link::#-inputs:: (via the link::#-specs::), i.e. a value from
code::(spec.minval .. spec.maxval)::. This is useful for communicating with
other UI elements which are often set through normalized values, like
link::Classes/Slider::s.

The new values and corresponding link::#-inputs:: will be broadcast to
dependents, via code::\values:: and code::\inputs:: messages,
respectively, every time either is set, unless link::#-broadcastNewOnly:: is
code::true::, in which case the values are only broadcast if they differ from
their previous state.

argument::  ... vals
The new values, in the range of their corresponding link::#-specs::,
which will be unmapped by the link::#-specs:: to set the link::#-inputs::.
You can provide less than the full number of values, but they will be assigned
in the order they were defined on initialization, you can't skip values. E.g.
if code::values.size == 5::, code::myView.values_(3,5,9):: would set only
the first three values in the link::#-values:: array.

Out-of-range strong::vals:: will be clipped, unless link::#-wrap:: is
code::true::, in which case they are wrapped into range.


METHOD:: valuesAction
Like link::#-values::, but in addition to setting the values, also perform the
link::#action::. See link::#-values:: for more details.

argument::  ... newValues
The new values, as succesive arguments. See link::#-values:: for more details.



METHOD:: inputs
Get/set the inputs held by the view, which are the unmapped counterpart
of the link::#-values:: (via the link::#-specs::), i.e. a number from
code::(0..1)::. This is useful for communicating with other UI elements which
are often set through normalized values, like link::Classes/Slider::s.

The new inputs and corresponding link::#-values:: will be broadcast to
dependents, via code::\inputs:: and code::\values:: messages,
respectively, every time either is set, unless link::#-broadcastNewOnly:: is
code::true::, in which case the values are only broadcast if they differ from
their previous state.

argument::  ... normInputs
The new inputs, as successive arguments, in the range code::(0..1)::, which
will be mapped by the link::#-specs:: to set the link::#-values::.

You can provide less than the full number of link::#-inputs::, but they will
be assigned in the order they were defined on initialization, you can't skip
inputs. E.g. if code::inputs.size == 5::, code::myView.inputs_(0.3, 0.5, 0.9)::
would set only the first three inputs in the link::#-inputs:: array.

Out-of-range inputs will be
clipped, unless link::#-wrap:: is code::true::, in which case
the strong::normInputs:: are wrapped into range.


METHOD:: inputsAction
Set the inputs, and perform the link::#-action::. (See link::#-inputs:: for
more details.)

argument::  ... normInputs
The new inputs, as successive arguments, in the range code::(0..1)::. (See
link::#-inputs:: for more details.)


METHOD:: inputAt
Get/set a single input at strong::index:: of the input array without performing
the link::#-action::. This also updates the link::#-valueAt:: by mapping
through the link::#-specAt::.

argument:: index
The strong::index:: of the input array to set.

argument:: normInput
A link::Classes/Number:: in the range of (0..1). Out-of-range inputs will be
clipped to the range, unless link::#-wrap:: is code::true::, in which case
the strong::normValue:: is wrapped into range.

argument:: broadcast
A link::Classes/Boolean:: indicating whether the new state should be broadcast.
Default is code::true::, which is the common behavior. In exceptional cases you
may want to link::#-broadcastState:: only after setting multiple inputs so the
view isn't redrawn with each input update. (This is how
link::#-inputsAction:: behaves internally.)


METHOD:: broadcastNewOnly
Get/set the link::Classes/Boolean:: determining whether dependents are
notified when the link::#-inputs:: or link::#-values:: are set but havn't
changed from their previous state. An advantage is that there's less throughput
if your view's (unchanged) state is updated rapidly. The disadvantage is that
if a new dependent is added, it won't necessarily know the state of the view
until the value changes (in which case it would need to access
this view's link::#-values:: and/or link::#-inputs:: when it's initialized).

Default is code::false::, i.e. the value and input are always broadcast when
set even if the values haven't changed.

Dependents can listen for strong::.changed:: messages with the keys
code::\values:: and code::\inputs::.


METHOD:: suppressRepeatedAction
Get/set the link::Classes/Boolean:: which determines if the link::#-action:: is
performed only when a newly set value differs from its previous state. This
applies when calling link::#-valueAction::, link::#-inputAction::,
or link::#-doAction::. Default is code::true:: (repeated actions are
suppressed).


PRIVATE:: update, drawFunc, superInit, broadcastState

EXAMPLES::

code::
(some example code)
::
