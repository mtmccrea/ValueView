TITLE:: XYScaleView
summary:: An XY control widget
categories:: GUI>Views
related:: Classes/ValuesView,  Guides/Subclassing-ValueView


image::../img/XYScaleView_example.png#A simple X-Y plotter interface::


DESCRIPTION::

A link::Classes/View:: for interacting with two values on an X/Y plot. Each
axis can be mapped to an independent link::Classes/ControlSpec::, and the
appearance can be customized.

This class also serves as a simple model for subclassing
link::Classes/ValuesView::, so you can use the class source file as a reference
for designing your own UI to visualize and interact with multiple values.


CLASSMETHODS::

METHOD:: new
Create a new link::Classes/XYScaleView::.

argument:: parent
A link::Classes/Window:: or link::Classes/View::, in which to embed this view.
If code::nil::, a window will be created to hold the view.

argument:: bounds
A link::Classes/Rect:: describing the bounds of this view within its
strong::parent::. If strong::parent:: is code::nil::, the
link::Classes/Rect:: specifies the dimensions of the newly created
link::Classes/Window:: and its location on the screen.

argument:: specs
An Array of link::Classes/ControlSpec::s that will control the range and
warping of your values.
If the array size differs from the number of strong::initVals::, it's assumed
that values' index wrap around the array of specs. If code::nil::, a
code::\unipolar:: spec is created for each of the strong::initVals::.

argument:: initVals
An Array of initial link::#-values:: when the view is first drawn. The size of
the array determines how many values this view represents

ARGUMENT:: moveRelative
A link::Classes/Boolean:: specifying whether the position moves relative to
the mouse or jumps to the value where pressed.

returns:: A link::Classes/XYScaleView::.


INSTANCEMETHODS::


METHOD:: fixSquare
Get/set the link::Classes/Boolean:: specifying whether the view canvas should
be fixed to a square aspect ratio, or fill the full view.

ARGUMENT:: bool
A link::Classes/Boolean::.


METHOD:: moveRelative
Get/set the link::Classes/Boolean:: specifying whether the position moves
relative to the mouse or jumps to the value where pressed.


METHOD:: background
Get/set the background color, not to be confused with the
link::#-backgrnd:: drawing layer.

ARGUMENT:: color
A link::Classes/Color::.


SUBSECTION:: Drawing layers


METHOD:: backgrnd
The drawing layer representing the canvas "background" (which isn't the same
as the view's link::#-background::)

table::
## strong::property:: || strong::default:: || strong::description::
## show        || code::true:: || show the backgrnd layer or not
## stroke      || code::false:: || stroke the boarder of the view or not (drawn last, on top)
## strokeWidth || code::2:: || width of stroke, in pixels

unless code::< 1::, then relative to smallest view dimension
## strokeColor || code::Color.black:: || color of the boarder stroke
## fill        || code::true:: || fill the background or not
## fillColor   || code::Color(0.9, 0.9, 0.9):: || color of the background
::


METHOD:: range
The drawing layer responsible for drawing the range illustration of each axis.

table::
## strong::property:: || strong::default:: || strong::description::
## show         || code::true:: || show the range layer or not
## strokeWidth  || code::0.03:: || width of stroke, in pixels

unless code::< 1::, then relative to smallest view dimension
## strokeXColor || code::Color.blue.alpha_(0.5):: || color of the x axis stroke
## strokeYColor || code::Color.red.alpha_(0.5):: || color of the y axis stroke
## showRangeLabels || code::true:: || show the text of range bounds or not
## fontName     || code::"Helvetica":: || font name string
## fontSize     || code::0.07:: || font size of the axis range text in pixels

unless code::< 1::, then relative to smallest view dimension
::


METHOD:: levels
The drawing layer responsible for drawing the current values of X and Y.

table::
## strong::property:: || strong::default:: || strong::description::
## show         || code::true:: || show the levels layer or not
## showPoint    || code::true:: || show a point where the values cross on the plotter or not
## pointSize    || code::true:: || radius of the point in pixels

unless code::< 1::, then relative to smallest view dimension
## pointColor   || code::nil:: || color of the point

if code::nil::, blends strong::strokeXColor:: and strong::strokeYColor::
## showCrosshairs || code::true:: || show crosshairs of the point location
## strokeWidth  || code::0.01:: ||  width of stroke, in pixels

unless code::< 1::, then relative to smallest view dimension
## strokeXColor || code::Color.blue.alpha_(0.5):: || color of the x value
## strokeYColor || code::Color.red.alpha_(0.5):: || color of the y value
## showText     || code::true:: || show the text of the values or not
## fontName     || code::"Helvetica":: || font name string
## fontSize     || code::0.07:: || font size of the axis range text in pixels

unless code::< 1::, then relative to minimum view dimension
::


PRIVATE:: bnds, cen, minDim, canvas, drawInThisOrder, defineMouseActions, init, cen, drawFunc, setAbsPosInput

EXAMPLES::

code::
(
v = XYScaleView(
	bounds: Size(400, 300).asRect,
	specs: [[4,7].asSpec, [26, 35].asSpec],
	initVals: [6,32]
).front
)

v.layers;                   // these are the drawing layers
v.range.strokeWidth = 0.01; // change a drawing layer properties (range layer)
v.levels.showCrosshairs_(false).showText_(false); // (levels layer)

v.specAt_(1, [2,3].asSpec); // change the value spec of the second value (y), view updates

// assign an action to perform when the value changes
(
v.action = {
	|view, values, inputs|
	postf("values: %, inputs: %\n", values, inputs)
}
)

v.values;              // access current values
v.inputs;              // access current values
v.fixSquare = false;   // don't fix the view to square aspect ratio, fill the whole view
v.moveRelative = true; // don't jump to cursor, move relative to it
::
